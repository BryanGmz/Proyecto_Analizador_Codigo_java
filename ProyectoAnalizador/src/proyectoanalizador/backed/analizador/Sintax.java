
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 02 01:36:02 CST 2020
//----------------------------------------------------

package proyectoanalizador.backed.analizador;

import java.util.List;
import proyectoanalizador.gui.Frame;
import java_cup.runtime.*;
import proyectoanalizador.backed.objetos.*;
import proyectoanalizador.backed.analizador.manejadores.ManejadorSintactico;
import proyectoanalizador.backed.objetos.analizador.lexico.*;
import proyectoanalizador.backed.objetos.analizador.sintactico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 02 01:36:02 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\003\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\002\000\002\006\006\000\002\007" +
    "\006\000\002\007\006\000\002\010\007\000\002\011\006" +
    "\000\002\012\006\000\002\012\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\002\000\002\020" +
    "\007\000\002\020\010\000\002\005\003\000\002\021\003" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\002\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\002\000\002\022\004\000\002\022" +
    "\004\000\002\025\004\000\002\025\002\000\002\023\004" +
    "\000\002\023\004\000\002\024\004\000\002\024\002\000" +
    "\002\026\007\000\002\026\007\000\002\026\004\000\002" +
    "\026\004\000\002\030\003\000\002\030\002\000\002\035" +
    "\003\000\002\035\005\000\002\027\007\000\002\027\005" +
    "\000\002\027\007\000\002\037\003\000\002\037\002\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\002\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\034\003\000\002\034\002\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\031\003\000\002" +
    "\031\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\041\010\000\002\041\007\000\002\050\006" +
    "\000\002\050\004\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\043\002\000\002\044\003\000\002" +
    "\044\003\000\002\045\003\000\002\045\004\000\002\045" +
    "\004\000\002\045\002\000\002\047\003\000\002\047\003" +
    "\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\016\003\016\004\020\005\021\006\010\007" +
    "\012\010\004\001\002\000\004\041\304\001\002\000\014" +
    "\004\020\005\021\006\010\007\012\010\004\001\002\000" +
    "\032\003\ufff4\005\021\006\010\007\012\010\004\021\ufff4" +
    "\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\001" +
    "\002\000\034\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\021\ufff6\037\ufff6\044\ufff6\045\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\001\002\000\004\041\256\001\002\000\004" +
    "\002\255\001\002\000\004\041\250\001\002\000\034\003" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\021\ufff7" +
    "\037\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\001" +
    "\002\000\022\003\041\021\040\037\044\044\030\045\032" +
    "\047\035\050\034\051\031\001\002\000\034\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\021\ufff5\037\ufff5" +
    "\044\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\001\002\000" +
    "\004\024\037\001\002\000\034\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\021\ufff8\037\ufff8\044\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000\004\041\027" +
    "\001\002\000\004\041\022\001\002\000\006\043\023\046" +
    "\024\001\002\000\004\024\026\001\002\000\004\024\025" +
    "\001\002\000\034\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\021\ufff2\037\ufff2\044\ufff2\045\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\001\002\000\034\003\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\021\ufff1\037\ufff1\044\ufff1" +
    "\045\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002\000\014\044" +
    "\030\045\032\047\035\050\034\051\031\001\002\000\024" +
    "\023\uffec\024\uffec\027\uffec\042\uffec\044\uffec\045\uffec\047" +
    "\uffec\050\uffec\051\uffec\001\002\000\024\023\uffe8\024\uffe8" +
    "\027\uffe8\042\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\001\002\000\024\023\uffea\024\uffea\027\uffea\042\uffea" +
    "\044\uffea\045\uffea\047\uffea\050\uffea\051\uffea\001\002\000" +
    "\004\024\036\001\002\000\024\023\uffe9\024\uffe9\027\uffe9" +
    "\042\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\001" +
    "\002\000\024\023\uffeb\024\uffeb\027\uffeb\042\uffeb\044\uffeb" +
    "\045\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000\032\003" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\021\ufff3\037\ufff3" +
    "\044\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002\000" +
    "\022\003\ufff9\021\ufff9\037\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\001\002\000\020\003\041\037\044\044" +
    "\030\045\032\047\035\050\034\051\031\001\002\000\022" +
    "\003\041\024\243\037\044\044\030\045\032\047\035\050" +
    "\034\051\031\001\002\000\004\023\237\001\002\000\006" +
    "\011\143\012\145\001\002\000\004\023\045\001\002\000" +
    "\010\025\051\026\050\030\052\001\002\000\010\024\uffcb" +
    "\027\uffcb\040\141\001\002\000\004\024\136\001\002\000" +
    "\056\016\073\017\056\020\064\023\062\024\074\025\051" +
    "\026\050\030\052\032\054\033\070\034\057\035\076\036" +
    "\067\037\075\041\066\043\131\044\030\045\032\047\035" +
    "\050\034\051\031\052\063\001\002\000\024\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\033\113\034\111\035\112" +
    "\040\uffc1\001\002\000\042\016\073\017\056\020\064\023" +
    "\062\024\074\032\054\033\070\034\057\035\076\036\067" +
    "\037\075\041\066\043\072\050\055\051\060\052\063\001" +
    "\002\000\044\016\073\017\056\020\064\023\062\024\074" +
    "\031\uffb8\032\121\033\070\034\057\035\076\036\067\037" +
    "\075\041\066\043\104\050\055\051\060\052\063\001\002" +
    "\000\046\016\uffb1\017\uffb1\020\uffb1\023\uffb1\024\uffb1\027" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\041\uffb1\043\uffb1\050\uffb1\051\uffb1\052\uffb1\001" +
    "\002\000\044\016\uffb7\017\uffb7\020\uffb7\023\uffb7\024\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\043\uffb7\050\uffb7\051\uffb7\052\uffb7\001\002" +
    "\000\046\016\uffaa\017\uffaa\020\uffaa\023\uffaa\024\uffaa\027" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\041\uffaa\043\uffaa\050\uffaa\051\uffaa\052\uffaa\001" +
    "\002\000\046\016\uffaf\017\uffaf\020\uffaf\023\uffaf\024\uffaf" +
    "\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\041\uffaf\043\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\001\002\000\044\016\uffb6\017\uffb6\020\uffb6\023\uffb6\024" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\041\uffb6\043\uffb6\050\uffb6\051\uffb6\052\uffb6\001" +
    "\002\000\004\031\uffbd\001\002\000\046\016\uffb4\017\uffb4" +
    "\020\uffb4\023\uffb4\024\uffb4\027\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4\043\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\001\002\000\046\016\uffb5\017" +
    "\uffb5\020\uffb5\023\uffb5\024\uffb5\027\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\041\uffb5\043" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\001\002\000\046\016\uffa9" +
    "\017\uffa9\020\uffa9\023\uffa9\024\uffa9\027\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\041\uffa9" +
    "\043\uffa9\050\uffa9\051\uffa9\052\uffa9\001\002\000\044\016" +
    "\073\017\056\020\064\023\062\024\074\031\uffb8\032\117" +
    "\033\070\034\057\035\076\036\067\037\075\041\066\043" +
    "\104\050\055\051\060\052\063\001\002\000\046\016\uffb2" +
    "\017\uffb2\020\uffb2\023\uffb2\024\uffb2\027\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2" +
    "\043\uffb2\050\uffb2\051\uffb2\052\uffb2\001\002\000\046\016" +
    "\uffad\017\uffad\020\uffad\023\uffad\024\uffad\027\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\041" +
    "\uffad\043\uffad\050\uffad\051\uffad\052\uffad\001\002\000\046" +
    "\016\uffb0\017\uffb0\020\uffb0\023\uffb0\024\uffb0\027\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\041\uffb0\043\uffb0\050\uffb0\051\uffb0\052\uffb0\001\002\000" +
    "\004\031\110\001\002\000\044\016\073\017\056\020\064" +
    "\023\062\024\074\031\uffb8\032\100\033\070\034\057\035" +
    "\076\036\067\037\075\041\066\043\104\050\055\051\060" +
    "\052\063\001\002\000\046\016\uffab\017\uffab\020\uffab\023" +
    "\uffab\024\uffab\027\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\041\uffab\043\uffab\050\uffab\051" +
    "\uffab\052\uffab\001\002\000\046\016\uffb3\017\uffb3\020\uffb3" +
    "\023\uffb3\024\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3\043\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\001\002\000\046\016\uffac\017\uffac\020" +
    "\uffac\023\uffac\024\uffac\027\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\041\uffac\043\uffac\050" +
    "\uffac\051\uffac\052\uffac\001\002\000\046\016\uffae\017\uffae" +
    "\020\uffae\023\uffae\024\uffae\027\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\041\uffae\043\uffae" +
    "\050\uffae\051\uffae\052\uffae\001\002\000\044\016\073\017" +
    "\056\020\064\023\062\024\074\031\uffb8\032\054\033\070" +
    "\034\057\035\076\036\067\037\075\041\066\043\104\050" +
    "\055\051\060\052\063\001\002\000\044\016\uffb1\017\uffb1" +
    "\020\uffb1\023\uffb1\024\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\041\uffb1\043\106\050\uffb1" +
    "\051\uffb1\052\uffb1\001\002\000\004\031\uffb9\001\002\000" +
    "\044\016\073\017\056\020\064\023\062\024\074\031\uffb8" +
    "\032\054\033\070\034\057\035\076\036\067\037\075\041" +
    "\066\043\104\050\055\051\060\052\063\001\002\000\004" +
    "\031\uffbb\001\002\000\044\016\073\017\056\020\064\023" +
    "\062\024\074\031\uffb8\032\054\033\070\034\057\035\076" +
    "\036\067\037\075\041\066\043\104\050\055\051\060\052" +
    "\063\001\002\000\004\031\uffba\001\002\000\004\031\uffbf" +
    "\001\002\000\004\031\uffbc\001\002\000\024\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\033\113\034\111\035\112" +
    "\040\uffc1\001\002\000\016\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\040\uffc3\001\002\000\016\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\040\uffc2\001\002\000\016\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\040\uffc4\001\002" +
    "\000\016\024\uffc5\025\051\026\050\027\uffc5\030\052\040" +
    "\uffc5\001\002\000\010\024\uffc6\027\uffc6\040\uffc6\001\002" +
    "\000\010\024\uffc9\027\uffc9\040\uffc9\001\002\000\044\016" +
    "\073\017\056\020\064\023\uffb1\024\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\067\037\075\041\uffb1\043" +
    "\uffb1\050\uffb1\051\uffb1\052\063\001\002\000\004\031\uffbe" +
    "\001\002\000\044\016\uffb1\017\uffb1\020\uffb1\023\uffb1\024" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\041\uffb1\043\uffb1\050\055\051\060\052\uffb1\001" +
    "\002\000\004\031\uffc0\001\002\000\016\024\uffc5\025\051" +
    "\026\050\027\uffc5\030\052\040\uffc5\001\002\000\010\024" +
    "\uffc8\027\uffc8\040\uffc8\001\002\000\004\027\uffa4\001\002" +
    "\000\004\027\uffa6\001\002\000\004\027\uffa8\001\002\000" +
    "\004\027\133\001\002\000\004\027\uffa5\001\002\000\004" +
    "\027\uffa7\001\002\000\024\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\033\113\034\111\035\112\040\uffc1\001\002" +
    "\000\016\024\uffc5\025\051\026\050\027\uffc5\030\052\040" +
    "\uffc5\001\002\000\010\024\uffc7\027\uffc7\040\uffc7\001\002" +
    "\000\024\003\041\011\uffcc\012\uffcc\037\044\044\030\045" +
    "\032\047\035\050\034\051\031\001\002\000\006\011\uffd0" +
    "\012\uffd0\001\002\000\006\011\uffcd\012\uffcd\001\002\000" +
    "\010\025\051\026\050\030\052\001\002\000\006\024\uffca" +
    "\027\uffca\001\002\000\014\013\151\014\152\015\150\047" +
    "\uffda\050\uffda\001\002\000\006\044\162\051\165\001\002" +
    "\000\004\011\146\001\002\000\014\013\151\014\152\015" +
    "\150\044\uffda\051\uffda\001\002\000\006\044\153\051\154" +
    "\001\002\000\012\044\uffdd\047\uffdd\050\uffdd\051\uffdd\001" +
    "\002\000\012\044\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\012\044\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002\000" +
    "\006\024\uffd2\036\217\001\002\000\006\024\uffd2\036\217" +
    "\001\002\000\004\024\156\001\002\000\014\003\161\011" +
    "\143\012\145\044\uffde\051\uffde\001\002\000\006\044\uffe4" +
    "\051\uffe4\001\002\000\006\044\uffe2\051\uffe2\001\002\000" +
    "\014\011\143\012\145\024\166\044\162\051\165\001\002" +
    "\000\020\024\uff93\041\uff93\042\uff93\044\uff93\047\uff93\050" +
    "\uff93\051\uff93\001\002\000\004\041\170\001\002\000\006" +
    "\044\uffe0\051\uffe0\001\002\000\020\024\uff92\041\uff92\042" +
    "\uff92\044\uff92\047\uff92\050\uff92\051\uff92\001\002\000\006" +
    "\044\uffe1\051\uffe1\001\002\000\006\044\uffdf\051\uffdf\001" +
    "\002\000\004\041\171\001\002\000\016\024\174\042\175" +
    "\044\162\047\172\050\177\051\165\001\002\000\020\024" +
    "\uff95\041\uff95\042\uff95\044\uff95\047\uff95\050\uff95\051\uff95" +
    "\001\002\000\012\002\uff96\003\204\044\162\051\165\001" +
    "\002\000\012\002\uff9a\003\uff9a\044\uff9a\051\uff9a\001\002" +
    "\000\012\002\uff9b\003\uff9b\044\uff9b\051\uff9b\001\002\000" +
    "\020\024\uff9f\041\uff9f\042\uff9f\044\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\001\002\000\020\024\uff94\041\uff94\042\uff94\044" +
    "\uff94\047\uff94\050\uff94\051\uff94\001\002\000\020\024\uff9c" +
    "\041\211\042\uff9c\044\162\047\172\050\177\051\165\001" +
    "\002\000\020\024\uff9e\041\uff9e\042\uff9e\044\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\001\002\000\006\024\174\042\175\001" +
    "\002\000\012\002\uff96\003\204\044\162\051\165\001\002" +
    "\000\010\024\207\044\162\051\165\001\002\000\010\002" +
    "\uffa3\044\uffa3\051\uffa3\001\002\000\010\002\uff99\044\uff99" +
    "\051\uff99\001\002\000\010\002\uff98\044\uff98\051\uff98\001" +
    "\002\000\010\002\uff97\044\uff97\051\uff97\001\002\000\014" +
    "\044\030\045\032\047\035\050\034\051\031\001\002\000" +
    "\006\024\uffa0\042\uffa0\001\002\000\006\024\uff9d\042\uff9d" +
    "\001\002\000\016\024\uff9c\042\uff9c\044\162\047\172\050" +
    "\177\051\165\001\002\000\006\024\uffa1\042\uffa1\001\002" +
    "\000\010\002\uffa2\044\uffa2\051\uffa2\001\002\000\006\044" +
    "\153\051\154\001\002\000\004\024\uffd4\001\002\000\004" +
    "\024\uffd3\001\002\000\004\024\uffd5\001\002\000\004\002" +
    "\uffff\001\002\000\006\047\227\050\226\001\002\000\004" +
    "\024\234\001\002\000\006\024\uffd6\036\230\001\002\000" +
    "\006\024\uffd6\036\230\001\002\000\006\047\227\050\226" +
    "\001\002\000\004\024\uffd9\001\002\000\004\024\uffd7\001" +
    "\002\000\004\024\uffd8\001\002\000\014\003\uffe3\011\uffe3" +
    "\012\uffe3\044\uffe3\051\uffe3\001\002\000\014\003\161\011" +
    "\143\012\145\044\uffde\051\uffde\001\002\000\006\044\uffe5" +
    "\051\uffe5\001\002\000\010\025\051\026\050\030\052\001" +
    "\002\000\004\024\241\001\002\000\024\003\041\011\uffcc" +
    "\012\uffcc\037\044\044\030\045\032\047\035\050\034\051" +
    "\031\001\002\000\006\011\uffd1\012\uffd1\001\002\000\006" +
    "\011\uffcf\012\uffcf\001\002\000\006\011\uffce\012\uffce\001" +
    "\002\000\006\011\143\012\145\001\002\000\006\044\162" +
    "\051\165\001\002\000\004\002\000\001\002\000\006\047" +
    "\252\050\251\001\002\000\004\024\254\001\002\000\004" +
    "\024\253\001\002\000\034\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\021\uffee\037\uffee\044\uffee\045\uffee" +
    "\047\uffee\050\uffee\051\uffee\001\002\000\034\003\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\021\uffed\037\uffed" +
    "\044\uffed\045\uffed\047\uffed\050\uffed\051\uffed\001\002\000" +
    "\004\002\001\001\002\000\014\044\030\045\032\047\035" +
    "\050\034\051\031\001\002\000\016\024\uffe6\044\030\045" +
    "\032\047\035\050\034\051\031\001\002\000\004\024\262" +
    "\001\002\000\004\024\uffe7\001\002\000\034\003\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\021\ufff0\037\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000" +
    "\032\003\ufff4\005\021\006\010\007\012\010\004\021\ufff4" +
    "\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\001" +
    "\002\000\032\003\ufff4\005\021\006\010\007\012\010\004" +
    "\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\001\002\000\032\003\ufff4\005\021\006\010\007\012" +
    "\010\004\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\001\002\000\022\003\ufffe\021\ufffe\037\ufffe" +
    "\044\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000" +
    "\014\004\020\005\021\006\010\007\012\010\004\001\002" +
    "\000\032\003\ufff4\005\021\006\010\007\012\010\004\021" +
    "\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\001\002\000\032\003\ufff4\005\021\006\010\007\012\010" +
    "\004\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\001\002\000\032\003\ufff4\005\021\006\010\007" +
    "\012\010\004\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\001\002\000\022\003\ufffd\021\ufffd\037" +
    "\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002" +
    "\000\014\004\020\005\021\006\010\007\012\010\004\001" +
    "\002\000\032\003\ufff4\005\021\006\010\007\012\010\004" +
    "\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\001\002\000\032\003\ufff4\005\021\006\010\007\012" +
    "\010\004\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\001\002\000\022\003\ufffc\021\ufffc\037\ufffc" +
    "\044\ufffc\045\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000" +
    "\004\004\020\001\002\000\032\003\ufff4\005\021\006\010" +
    "\007\012\010\004\021\ufff4\037\ufff4\044\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\001\002\000\022\003\ufffb\021\ufffb" +
    "\037\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb\001" +
    "\002\000\022\003\ufffa\021\ufffa\037\ufffa\044\ufffa\045\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\001\002\000\004\043\305\001" +
    "\002\000\004\024\306\001\002\000\034\003\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\021\uffef\037\uffef\044" +
    "\uffef\045\uffef\047\uffef\050\uffef\051\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\022\002\010\003\013\004\004\006\005\007" +
    "\016\010\012\011\006\012\014\001\001\000\002\001\001" +
    "\000\016\004\266\006\267\007\016\010\012\011\006\012" +
    "\014\001\001\000\014\004\262\007\016\010\012\011\006" +
    "\012\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\041\026\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\041\026\244\001" +
    "\001\000\006\013\041\026\243\001\001\000\002\001\001" +
    "\000\004\020\143\001\001\000\002\001\001\000\006\027" +
    "\045\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\125\016\124\027\045\031\127\035\131\036" +
    "\126\001\001\000\004\017\122\001\001\000\012\015\052" +
    "\016\064\032\070\033\060\001\001\000\012\015\076\016" +
    "\101\033\100\034\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\076\016\101\033\100\034" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\076\016\101\033" +
    "\100\034\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\076\016" +
    "\101\033\100\034\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\076\016\101\033\100\034\104\001" +
    "\001\000\002\001\001\000\012\015\076\016\101\033\100" +
    "\034\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\114\037" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\117\001\001\000\002\001\001\000\004\015\121\001" +
    "\001\000\002\001\001\000\006\027\114\037\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\133\001\001\000\006\027\114\037" +
    "\134\001\001\000\002\001\001\000\010\013\041\026\137" +
    "\030\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\141\001\001\000\002\001\001\000\004\040\223" +
    "\001\001\000\006\041\222\046\162\001\001\000\002\001" +
    "\001\000\004\040\146\001\001\000\004\023\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\221\001\001\000\004\024\217\001\001\000\002" +
    "\001\001\000\006\020\157\021\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\163\041\166\046\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\177\044\172\046\200\047" +
    "\175\050\201\001\001\000\002\001\001\000\010\041\205" +
    "\045\215\046\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\177" +
    "\043\211\046\200\047\175\050\212\001\001\000\002\001" +
    "\001\000\004\044\202\001\001\000\010\041\205\045\204" +
    "\046\162\001\001\000\006\041\207\046\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\042\177\043\214\046\200\047\175" +
    "\050\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\224\001" +
    "\001\000\004\005\234\001\001\000\004\025\232\001\001" +
    "\000\004\025\230\001\001\000\004\022\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\157\021\235\001\001\000\002\001" +
    "\001\000\006\027\045\035\237\001\001\000\002\001\001" +
    "\000\010\013\041\026\137\030\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\245" +
    "\001\001\000\006\041\246\046\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\256\001\001\000\006\013\260\014\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\263\007\016\010\012\011\006\012\014\001\001" +
    "\000\014\004\264\007\016\010\012\011\006\012\014\001" +
    "\001\000\014\004\265\007\016\010\012\011\006\012\014" +
    "\001\001\000\002\001\001\000\016\004\273\006\274\007" +
    "\016\010\012\011\006\012\014\001\001\000\014\004\270" +
    "\007\016\010\012\011\006\012\014\001\001\000\014\004" +
    "\271\007\016\010\012\011\006\012\014\001\001\000\014" +
    "\004\272\007\016\010\012\011\006\012\014\001\001\000" +
    "\002\001\001\000\016\004\277\006\300\007\016\010\012" +
    "\011\006\012\014\001\001\000\014\004\275\007\016\010" +
    "\012\011\006\012\014\001\001\000\014\004\276\007\016" +
    "\010\012\011\006\012\014\001\001\000\002\001\001\000" +
    "\004\006\302\001\001\000\014\004\301\007\016\010\012" +
    "\011\006\012\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintactico ms;
    public Arbol arbol;
    public ReglasGramaticas rg;
    public List<Lenguajes> lenguajes;
    public Frame frame;

    public Sintax(Lexer lexer, Frame frame) { 
        super(lexer);   
        this.frame = frame;
        this.ms = ManejadorSintactico.getInstacia();
    }

    public Sintax(Lexer lexer) { 
        super(lexer);   
        this.ms = ManejadorSintactico.getInstacia();
    }

    public void setLenguajes(List<Lenguajes> lista){
        this.lenguajes = lista;
    }

    public void resetRecursos(){
        this.arbol = new Arbol();
        this.rg = new ReglasGramaticas();
        this.ms.reset(this.frame);
    }

    @Override
    public void syntax_error(Symbol s){
        if(s != null && s.right > 0){
            try {
                frame.addError(
                (("Error Sintaxis\n\tLinea #: " + (s.right + 1) 
                + "\n\tColumna # " + ((s.left) / s.right + 1)
                + "\n\tToken NO Reconocido: -> " + (s.value) + "\n" )));
            } catch (Exception e) {
                System.out.println("Error " + e.toString());
            }
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pro_may ::= LETRA_MAY 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pro_may",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pro_may ::= MAYUSCULA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pro_may",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pro_min ::= LETRA_MIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pro_min",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // pro_min ::= MINUSCULAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pro_min",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // reglas_p ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas_p",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // reglas_p ::= error reglas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas_p",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // reglas_p ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas_p",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // reglas_p ::= reglas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas_p",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // reglas_semanticas ::= PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas_semanticas",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // reglas_semanticas ::= REGLAS_SEMANTICAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a.toString().substring(1, a.toString().length() - 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas_semanticas",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_reglas_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_reglas_p",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_reglas_p ::= cuerpo_reglas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_reglas_p",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // contenido_reglas ::= pro_may 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = (parser.ms.retornarTNT(parser.rg.getNoTerminales(), false, a.toString(), aleft, aright));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_reglas",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // contenido_reglas ::= pro_min 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = (parser.ms.retornarTNT(parser.rg.getTerminales(), true, a.toString(), aleft, aright));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_reglas",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_reglas ::= contenido_reglas cuerpo_reglas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.construirSigPro(a, null, c, aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_reglas",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_reglas ::= contenido_reglas DOS_PUNTOS p_palabras cuerpo_reglas_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.construirSigPro(a, b, c, aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_reglas",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // reglas ::= pro_may DOS_PUNTOS DOS_PUNTOS reglas_semanticas reglas_p 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.ms.addRG(new NoTerminal(true), parser.rg.getReglasGramaticas(), s.toString(), sleft, sright, e.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // reglas ::= pro_may DOS_PUNTOS DOS_PUNTOS cuerpo_reglas reglas_semanticas reglas_p 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.ms.addRG(a, parser.rg.getReglasGramaticas(), s.toString(), aleft, aright, e.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reglas",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contenido_exp_parentesis ::= exp_signos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.unionDePalabras(a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_parentesis",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contenido_exp_parentesis ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.unionDePalabras(a.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_parentesis",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contenido_exp_parentesis ::= p_palabras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.unionDePalabras(a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_parentesis",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_exp_parentesis ::= s_exp_regulares 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_exp_parentesis",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_exp_parentesis ::= contenido_exp_parentesis 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_exp_parentesis",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp_signos ::= TABULADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp_signos ::= ESPACIO_B 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp_signos ::= SALTO_LINEA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp_signos ::= AMPERSAND 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp_signos ::= COMA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp_signos ::= MAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp_signos ::= MULTIPLICACION 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp_signos ::= INTERROGACION_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp_signos ::= MENOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp_signos ::= DOS_PUNTOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp_signos ::= PUNTO_COMA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp_signos ::= IGUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp_signos ::= SIGNO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_signos",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_pal_reg ::= LETRA_MAY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_pal_reg",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_pal_reg ::= LETRA_MIN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_pal_reg",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contenido_exp_llave_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_llave_p",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contenido_exp_llave_p ::= contenido_exp_llave 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_llave_p",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contenido_exp_llave ::= exp_signos contenido_exp_llave_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(a == null){
            if(e.charAt(0) == '\\' && e.charAt(1) == 'n'){
                RESULT = parser.arbol.insertarCaracter('\n');
            } else if (e.charAt(0) == '\\' && e.charAt(1) == 't') {
                RESULT = parser.arbol.insertarCaracter('\t');
            } else if (e.charAt(0) == '\\' && e.charAt(1) == 'b') {
                RESULT = parser.arbol.insertarCaracter('\b');
            } else {
                RESULT = parser.arbol.insertarCaracter(e.charAt(0));
            }
        } else {
            if(e.charAt(0) == '\\' && e.charAt(1) == 'n'){
                RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.insertarCaracter('\n'), (Nodo) a, false);
            } else if (e.charAt(0) == '\\' && e.charAt(1) == 't') {
                RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.insertarCaracter('\t'), (Nodo) a, false);
            } else if (e.charAt(0) == '\\' && e.charAt(1) == 'b') {
                RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.insertarCaracter('\b'), (Nodo) a, false);
            } else {
                RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.insertarCaracter(e.charAt(0)), (Nodo) a, false);
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_llave",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // contenido_exp_llave ::= NUMERO contenido_exp_llave_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(a == null){
            RESULT = parser.arbol.insertarCaracter(e.toString().charAt(0));
        } else {
            RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.insertarCaracter(e.toString().charAt(0)), (Nodo) a, false);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_llave",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contenido_exp_llave ::= exp_pal_reg contenido_exp_llave_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(a == null){
            RESULT = parser.arbol.insertarCaracter(e.charAt(0));
        } else {
            RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.insertarCaracter(e.charAt(0)), (Nodo) a, false);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("contenido_exp_llave",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpo_exp_llave ::= contenido_exp_llave 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_exp_llave",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpo_exp_llave ::= exp_signos MENOS exp_signos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.crearUnionCaracteres(a.charAt(0), e.charAt(0), (int) a.charAt(0), (int) e.charAt(0));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_exp_llave",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo_exp_llave ::= NUMERO MENOS NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.crearUnionCaracteres(a.toString().charAt(0), e.toString().charAt(0), (int) a.toString().charAt(0), (int) e.toString().charAt(0));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_exp_llave",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo_exp_llave ::= exp_pal_reg MENOS exp_pal_reg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.crearUnionCaracteres(a.charAt(0), e.charAt(0), (int) a.charAt(0), (int) e.charAt(0));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo_exp_llave",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cantidad_expresion ::= 
            {
              Integer RESULT =null;
		RESULT = 0;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cantidad_expresion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cantidad_expresion ::= MAS 
            {
              Integer RESULT =null;
		RESULT = 3;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cantidad_expresion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cantidad_expresion ::= MULTIPLICACION 
            {
              Integer RESULT =null;
		RESULT = 2;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cantidad_expresion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cantidad_expresion ::= INTERROGACION_C 
            {
              Integer RESULT =null;
		RESULT = 1;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cantidad_expresion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_regulares_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_regulares_p",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_regulares_p ::= exp_regulares 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_regulares_p",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_regulares ::= PARENTESIS_A cuerpo_exp_parentesis PARENTESIS_C cantidad_expresion exp_regulares_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(i == null){
            RESULT = parser.arbol.concatencacionExpresionesCant((Nodo) a, (int) e);
        } else { 
            RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.concatencacionExpresionesCant((Nodo) a, (int) e), (Nodo) i, true);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_regulares",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_regulares ::= COMILLAS cantidad_expresion exp_regulares_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(i == null){
            RESULT = parser.arbol.concatencacionExpresionesCant(parser.arbol.insertarPalabra(a.toString().replaceAll("\"", "")), (int) e);
        } else { 
            RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.concatencacionExpresionesCant(parser.arbol.insertarPalabra(a.toString().replaceAll("\"", "")), (int) e), (Nodo) i, true);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_regulares",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_regulares ::= LLAVE_A cuerpo_exp_llave LLAVE_C cantidad_expresion exp_regulares_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(i == null){
            RESULT = parser.arbol.concatencacionExpresionesCant((Nodo) a, (int) e);
        } else { 
            RESULT = parser.arbol.insertarNodoYNodo(parser.arbol.concatencacionExpresionesCant((Nodo) a, (int) e), (Nodo) i, true);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_regulares",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // s_exp_regulares ::= exp_regulares BARRA_VERTICAL exp_regulares 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.arbol.insertarNodoYNodo((Nodo) a, (Nodo) e, false);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("s_exp_regulares",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // s_exp_regulares ::= exp_regulares 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = (Nodo) a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("s_exp_regulares",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_reg ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_reg",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_reg ::= inicio_exp_reg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = (Nodo) a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_reg",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inicio_exp_reg ::= error inicio_exp_reg 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		parser.syntax_error((Symbol) e); RESULT = (Nodo) a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio_exp_reg",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inicio_exp_reg ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio_exp_reg",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inicio_exp_reg ::= AMPERSAND IGUAL s_exp_regulares PUNTO_COMA exp_reg 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if(e == null){
            ((Nodo) a ).setId("&");  
            ((Nodo) a ).setIgnorar(true);  
            RESULT = (Nodo) a;
        } else {
            ((Nodo) a).setId("&");  
            ((Nodo) a).setIgnorar(true);  
            RESULT = parser.arbol.insertarNodoYNodo((Nodo) a, (Nodo) e, false);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio_exp_reg",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inicio_exp_reg ::= p_palabras IGUAL s_exp_regulares PUNTO_COMA exp_reg 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
        if(e == null){
            ((Nodo) a ).setId(i);  
            RESULT = (Nodo) a;
        } else {
            ((Nodo) a ).setId(i);  
            RESULT = parser.arbol.insertarNodoYNodo((Nodo) a, (Nodo) e, false);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio_exp_reg",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estructura_no_terminales ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_no_terminales",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estructura_no_terminales ::= COMA simbolo_no_terminal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_no_terminales",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simbolo_no_terminal ::= LETRA_MAY estructura_no_terminales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.ms.agregarTNT(parser.rg.getNoTerminales(), false, a.toString(), aleft, aright, parser.rg.getReglasGramaticas(), null, parser.ms.getcN());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simbolo_no_terminal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simbolo_no_terminal ::= MAYUSCULA estructura_no_terminales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.ms.agregarTNT(parser.rg.getNoTerminales(), false, a.toString(), aleft, aright, parser.rg.getReglasGramaticas(), null, parser.ms.getcN());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simbolo_no_terminal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura_terminales ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_terminales",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estructura_terminales ::= COMA simbolo_terminal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_terminales",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simbolo_terminal ::= LETRA_MIN estructura_terminales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.ms.agregarTNT(parser.rg.getTerminales(), true, a.toString(), aleft, aright, null, parser.rg.getPrecedencia(), parser.ms.getcN());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simbolo_terminal",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simbolo_terminal ::= MINUSCULAS estructura_terminales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.ms.agregarTNT(parser.rg.getTerminales(), true, a.toString(), aleft, aright, null, parser.rg.getPrecedencia(), parser.ms.getcN());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("simbolo_terminal",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // p_tipo ::= 
            {
              Object RESULT =null;
		parser.ms.addTipo(null); RESULT = null;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_tipo",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // p_tipo ::= CADENA 
            {
              Object RESULT =null;
		parser.ms.addTipo("cadena"); RESULT = "Cadena";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_tipo",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // p_tipo ::= ENTERO 
            {
              Object RESULT =null;
		parser.ms.addTipo("entero"); RESULT = "Entero";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_tipo",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // p_tipo ::= REAL 
            {
              Object RESULT =null;
		parser.ms.addTipo("real"); RESULT = "Real";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_tipo",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tnt_p ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt_p",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tnt_p ::= error reglas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt_p",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tnt_p ::= error tnt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt_p",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tnt_p ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt_p",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tnt_p ::= tnt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt_p",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // p_c ::= PUNTO_COMA 
            {
              Object RESULT =null;
		parser.ms.aumentarCN();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_c",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tnt ::= NO TERMINAL p_tipo simbolo_no_terminal PUNTO_COMA tnt_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tnt ::= TERMINAL p_tipo simbolo_terminal p_c tnt_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tnt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pp_palabras ::= 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pp_palabras",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pp_palabras ::= p_palabras 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pp_palabras",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // p_palabras ::= LETRA_MAY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_palabras",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // p_palabras ::= LETRA_MIN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_palabras",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // p_palabras ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_palabras",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // p_palabras ::= MINUSCULAS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_palabras",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // p_palabras ::= MAYUSCULA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_palabras",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // p_extension ::= EXTENSION DOS_PUNTOS LETRA_MIN PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = parser.ms.addTabla(e.toString(), eleft, eright, "Extension");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_extension",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // p_extension ::= EXTENSION DOS_PUNTOS MINUSCULAS PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = parser.ms.addTabla(e.toString(), eleft, eright, "Extension");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_extension",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // p_lanzamiento ::= LANZAMIENTO DOS_PUNTOS NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = parser.ms.addTabla(e.toString(), eleft, eright, "Lanzamiento");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_lanzamiento",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // p_autor ::= AUTOR DOS_PUNTOS p_palabras pp_palabras PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if(a != null){
            RESULT = parser.ms.addTabla(a + e, aleft, aright, "Autor");
        } else {
            RESULT = parser.ms.addTabla(a, aleft, aright, "Autor");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_autor",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // p_version ::= VERSION DOS_PUNTOS NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = parser.ms.addTabla(e.toString(), eleft, eright, "Version");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_version",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // p_version ::= VERSION DOS_PUNTOS VERSION_NUMEROS PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = parser.ms.addTabla(e.toString(), eleft, eright, "Version");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_version",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p_nombre ::= NOMBRE DOS_PUNTOS p_palabras PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = parser.ms.addTabla(e.toString(), eleft, eright, "Nombre");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("p_nombre",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_inf_lenguaje ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_inf_lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_inf_lenguaje ::= p_extension 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_inf_lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_inf_lenguaje ::= p_lanzamiento 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_inf_lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_inf_lenguaje ::= p_autor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_inf_lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_inf_lenguaje ::= p_version 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_inf_lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inf_lenguaje ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inf_lenguaje",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inf_lenguaje ::= exp_inf_lenguaje exp_inf_lenguaje exp_inf_lenguaje exp_inf_lenguaje p_nombre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.comprobarInformacion(aleft, aright, eleft, eright, ileft, iright, oleft, oright, uleft, uright, a, e, i, o, u);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inf_lenguaje",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inf_lenguaje ::= exp_inf_lenguaje exp_inf_lenguaje exp_inf_lenguaje p_nombre exp_inf_lenguaje 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.comprobarInformacion(aleft, aright, eleft, eright, ileft, iright, oleft, oright, uleft, uright, a, e, i, o, u);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inf_lenguaje",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inf_lenguaje ::= exp_inf_lenguaje exp_inf_lenguaje p_nombre exp_inf_lenguaje exp_inf_lenguaje 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.comprobarInformacion(aleft, aright, eleft, eright, ileft, iright, oleft, oright, uleft, uright, a, e, i, o, u);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inf_lenguaje",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inf_lenguaje ::= exp_inf_lenguaje p_nombre exp_inf_lenguaje exp_inf_lenguaje exp_inf_lenguaje 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.comprobarInformacion(aleft, aright, eleft, eright, ileft, iright, oleft, oright, uleft, uright, a, e, i, o, u);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inf_lenguaje",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inf_lenguaje ::= p_nombre exp_inf_lenguaje exp_inf_lenguaje exp_inf_lenguaje exp_inf_lenguaje 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = parser.ms.comprobarInformacion(aleft, aright, eleft, eright, ileft, iright, oleft, oright, uleft, uright, a, e, i, o, u);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inf_lenguaje",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= inf_lenguaje inicio_exp_reg tnt reglas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        if (a == null){
            System.out.println("ERROR");
        } else {
            parser.lenguajes.add(parser.ms.generadorLenguaje(parser.arbol, (Nodo) e, parser.rg, (InfLenguaje) a, ""));
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inf_lenguaje CODIGO_FUENTE inicio_exp_reg tnt reglas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        if (a == null){
            System.out.println("ERROR");
        } else {
            Lenguajes lenguaje = parser.ms.generadorLenguaje(parser.arbol, (Nodo) e, parser.rg, (InfLenguaje) a, c.toString());
            parser.lenguajes.add(lenguaje);
            parser.frame.addLng(lenguaje);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


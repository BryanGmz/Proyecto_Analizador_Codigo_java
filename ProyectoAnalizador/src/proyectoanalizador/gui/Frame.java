/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoanalizador.gui;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyectoanalizador.backed.analizador.Lexer;
import proyectoanalizador.backed.analizador.Sintax;
import proyectoanalizador.backed.analizador.manejadores.ManejadorArchivosBinarios;
import proyectoanalizador.backed.analizador.manejadores.ManejadorEntrada;
import proyectoanalizador.backed.analizador.manejadores.ManejadorGeneradorHTML;
import proyectoanalizador.backed.objetos.InfLenguaje;
import proyectoanalizador.backed.objetos.Lenguajes;
import proyectoanalizador.backed.objetos.Pestaña;

/**
 *
 * @author bryan
 */
public class Frame extends javax.swing.JFrame implements Serializable {
    
    private final List<Pestaña> pestañas;
    private String pestañaActual;
    private final List<FileNameExtensionFilter> extensionesLenguajes;
    private final List<Lenguajes> lenguajes;
    private static List<String> errores;
    private DialogBorrarLenguaje borrarLenguaje;
    private DialogErrores dialogErrores;
    private ManejadorEntrada me = ManejadorEntrada.getManejadorEntrada();
    private ManejadorGeneradorHTML generadorHTML;
    private Lenguajes actual;
    private Pestaña pActual;
    
    private int contadorPestanias;
    private ManejadorArchivosBinarios<Lenguajes> archivosBinarios;
    
    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
        crearCarpeta();
        contadorPestanias = 1;
        this.dialogErrores = new DialogErrores(this, true);
        this.pestañas = new ArrayList<>();
        this.extensionesLenguajes = new ArrayList<>();
        this.errores = new ArrayList<>();
        this.archivosBinarios =  new ManejadorArchivosBinarios<>();
        this.lenguajes = archivosBinarios.leerListaArchivos(ManejadorArchivosBinarios.EXTENSION_ARCHIVO);
        this.extensionesLenguajes.add(new FileNameExtensionFilter("Archivo que contiene la estructura de un lenguaje. (.len)", "len"));
        this.setLocationRelativeTo(null);
        menuTablaLALR.setEnabled(false);
        menuPila.setEnabled(false);
        menuCompilar.setEnabled(false);
        menuErrores.setEnabled(false);
        removerMenus();
    }

    public List<String> getErrores() {
        return errores;
    }

    public void setErrores(List<String> errores) {
        this.errores = errores;
    }
    
    public void setPestañaActual(String pestañaActual) {
        this.pestañaActual = pestañaActual;
    }

    public void setLblCursor(String lblCursor) {
        this.lblCursor.setText(lblCursor);
    }

    public void addLenguaje(Lenguajes lenguaje){
        this.lenguajes.add(lenguaje);
    }
    
    public Lenguajes getLenguaje(String lenguaje){
        for (Lenguajes lenguajeBuscar : lenguajes) {
            if (lenguajeBuscar.getInformacionLenguaje().getNombre().equals(lenguaje)) {
                return lenguajeBuscar;
            }
        } return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblColumna = new javax.swing.JPanel();
        lblLenguajeSeleccionado = new javax.swing.JLabel();
        txtLenguajeSeleccionado = new javax.swing.JTextField();
        panelConPestañas = new javax.swing.JTabbedPane();
        lblCursor = new javax.swing.JLabel();
        menuPrincipal = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuGuardarComo = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenuItem();
        menuLenguajes = new javax.swing.JMenu();
        menuEjecutar = new javax.swing.JMenu();
        menuCompilar = new javax.swing.JMenuItem();
        menuCargarLenguaje = new javax.swing.JMenuItem();
        menuBorrarLenguaje = new javax.swing.JMenuItem();
        menuVer = new javax.swing.JMenu();
        menuTablaLALR = new javax.swing.JMenuItem();
        menuPila = new javax.swing.JMenuItem();
        menuErrores = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblLenguajeSeleccionado.setText("Lenguaje Seleccionado:");

        txtLenguajeSeleccionado.setEditable(false);

        lblCursor.setText("Linea: 1 - Columna: 1");

        javax.swing.GroupLayout lblColumnaLayout = new javax.swing.GroupLayout(lblColumna);
        lblColumna.setLayout(lblColumnaLayout);
        lblColumnaLayout.setHorizontalGroup(
            lblColumnaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblColumnaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lblColumnaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelConPestañas)
                    .addGroup(lblColumnaLayout.createSequentialGroup()
                        .addComponent(lblLenguajeSeleccionado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLenguajeSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 259, Short.MAX_VALUE)
                        .addComponent(lblCursor)))
                .addContainerGap())
        );
        lblColumnaLayout.setVerticalGroup(
            lblColumnaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblColumnaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lblColumnaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lblColumnaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLenguajeSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblLenguajeSeleccionado))
                    .addComponent(lblCursor, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelConPestañas, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuArchivo.setText("Archivo");

        menuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        menuGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuGuardarComo.setText("Guardar Como");
        menuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardarComo);

        menuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuSalir.setText("Salir");
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuSalir);

        menuPrincipal.add(menuArchivo);

        menuLenguajes.setText("Lenguajes");
        menuPrincipal.add(menuLenguajes);

        menuEjecutar.setText("Ejecutar");

        menuCompilar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        menuCompilar.setText("Compilar");
        menuCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCompilarActionPerformed(evt);
            }
        });
        menuEjecutar.add(menuCompilar);

        menuCargarLenguaje.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menuCargarLenguaje.setText("Cargar Lenguaje");
        menuCargarLenguaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCargarLenguajeActionPerformed(evt);
            }
        });
        menuEjecutar.add(menuCargarLenguaje);

        menuBorrarLenguaje.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        menuBorrarLenguaje.setText("Borrar Lenguaje");
        menuBorrarLenguaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBorrarLenguajeActionPerformed(evt);
            }
        });
        menuEjecutar.add(menuBorrarLenguaje);

        menuPrincipal.add(menuEjecutar);

        menuVer.setText("Ver");

        menuTablaLALR.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        menuTablaLALR.setText("Tabla LALR");
        menuTablaLALR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTablaLALRActionPerformed(evt);
            }
        });
        menuVer.add(menuTablaLALR);

        menuPila.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuPila.setText("Pila");
        menuVer.add(menuPila);

        menuPrincipal.add(menuVer);

        menuErrores.setText("Errores");
        menuErrores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuErroresMouseClicked(evt);
            }
        });
        menuPrincipal.add(menuErrores);

        setJMenuBar(menuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblColumna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblColumna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        // TODO add your handling code here:
//        String nombreArchivo = JOptionPane.showInputDialog("Nombre del Archivo:");
        agregarPestaña("Documento " + contadorPestanias, "", "// TODO code application logic here");
        contadorPestanias++;
    }//GEN-LAST:event_menuNuevoActionPerformed
    
    /* Metodo para cargar un nuevo lenguaje. */
    private void menuCargarLenguajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCargarLenguajeActionPerformed
        // TODO add your handling code here:
        /* Primer Paso leer el archivo .len*/
        errores.clear();
        menuErrores.setEnabled(false);
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(extensionesLenguajes.get(0));
        int opcion;
        opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
                String docIde = "";
                File archivo = chooser.getSelectedFile();
                FileReader entrada;
                entrada = new FileReader(archivo);
                int e;
                while ((e = entrada.read()) != -1) {
                    char caracter = (char) e;
                    docIde += caracter;
                }
                entrada.close();
                String entradaTXT = me.entradaTexto(docIde);
                System.out.println("Entrada: \n" + entradaTXT);
                Lexer lexer = new Lexer(new StringReader(entradaTXT));
                lexer.setFrame(this);
                Sintax sintax = new Sintax(lexer, this);
                sintax.setLenguajes(lenguajes);
                sintax.resetRecursos();
                try {
                    sintax.parse();
                    guardarLenguajes();
                    JOptionPane.showMessageDialog(this, "Lenguaje Cargado");
                } catch (Exception ex) {
                    ex.printStackTrace();
                    System.out.println("Revisa tu entrada");
                    menuPila.setEnabled(false);
                    menuTablaLALR.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "Error, en la sintaxis el archivo de entrada. Revisa el apartado de errores para mayor información", "ERROR", JOptionPane.ERROR_MESSAGE);
                    menuErrores.setEnabled(true);
                    removerMenus();
                }
            } catch (IOException ex) {
                System.out.println("Error en carga archivo .len");
            }
            
            if (errores.isEmpty()) {
                
            } else {
                
            }
        }
    }//GEN-LAST:event_menuCargarLenguajeActionPerformed

    
    private void guardarLenguajes(){
        lenguajes.forEach((lenguaje) -> {
            archivosBinarios.crearArchivo(lenguaje, ManejadorArchivosBinarios.TIPO_ARCHIVO, 
                    lenguaje.getInformacionLenguaje().getVersion() + lenguaje.getInformacionLenguaje().getNombre(), ManejadorArchivosBinarios.EXTENSION_ARCHIVO);
        });
    }
    
    private void crearCarpeta(){
        File directorio = new File("./Repositorio");
        if (!directorio.exists()) {
            if (directorio.mkdir()) {
                System.out.println("Directorio creado");
            } else {
                System.out.println("Error al crear directorio");
            }
        }
    }
    
    private void menuBorrarLenguajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBorrarLenguajeActionPerformed
        // TODO add your handling code here:
        borrarLenguaje = null;
        borrarLenguaje = new DialogBorrarLenguaje(this, true, lenguajes);
        borrarLenguaje.setVisible(true);
        removerMenus();
        txtLenguajeSeleccionado.setText("");
        menuPila.setEnabled(false);
        menuTablaLALR.setEnabled(false);
        removerMenus();
    }//GEN-LAST:event_menuBorrarLenguajeActionPerformed

    private void menuCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCompilarActionPerformed
        // TODO add your handling code here:
        if (!txtLenguajeSeleccionado.getText().isEmpty() && actual != null) {
            JOptionPane.showMessageDialog(this, "Lenguaje Compilar: " + getLenguaje(txtLenguajeSeleccionado.getText()).getInformacionLenguaje().getNombre());
            JOptionPane.showMessageDialog(this, "Archivo: " + pestañaActual);
            pActual = getPestaña();
            try {
                actual.getAnalizadorLexico().iniciarAnalizadorLexico(pActual.getTextArea().getText());
                actual.getPila().pilas();
                generadorHTML = new ManejadorGeneradorHTML(actual.getTablaLALR().getTerminalesNoTerminales());
                generadorHTML.escribirArchivoSalida("./Pila.html", 
                        generadorHTML.construirPila(actual.getPila().getRegistroEstados(), actual.getPila().getRegistroSimbolos()
                        , actual.getPila().getRegistroAcciones()));
                abrirHTML("./Pila.html");
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se puede compilar debido a que no se a seleccionado un lenguaje.");
        }
    }//GEN-LAST:event_menuCompilarActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int opcion;
        opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
                String docIde = "";
                File archivo = chooser.getSelectedFile();
                FileReader entrada;
                entrada = new FileReader(archivo);
                int e;
                while ((e = entrada.read()) != -1) {
                    char caracter = (char) e;
                    docIde += caracter;
                }
                entrada.close();
                agregarPestaña(archivo.getName(), archivo.getAbsolutePath(), docIde);
                System.out.println("Entrada");
            } catch (IOException ex) {
                System.out.println("Error en carga archivo .len");
            }
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void agregarPest(){
        for (Pestaña pestaña : pestañas) {
            panelConPestañas.addTab(pestaña.getNombre(), pestaña.getScrollPane());
        }
    }
    
    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        // TODO add your handling code here:
        Pestaña aux = getPestaña();
        if (aux != null) {
            JOptionPane.showMessageDialog(this, "La pestaña seleccionada es la ultima que se edito.");
            if (aux.getPath() != null && aux.getPath().isEmpty()) {
                JFileChooser chooser = new JFileChooser();
                int opcion;
                opcion = chooser.showSaveDialog(this);
                if (opcion == JFileChooser.APPROVE_OPTION) {
                    try {
                        File archivo = chooser.getSelectedFile();
                        if (aux.getPath() == null || aux.getPath().isEmpty()) {
                            if (actual != null) {
                                System.out.println("Extenson " + actual.getInformacionLenguaje().getExtension());
                                aux.setPath(archivo.getAbsolutePath() + extension());
                            } else {
                                JOptionPane.showMessageDialog(this, "Debido a que no has seleccionado ningun lenguaje se guardara con extension \".txt\"");
                                aux.setPath(archivo.getAbsolutePath() + ".txt");
                            }
                        }
                        Pestaña pestaña = getPestaña();
                        pestaña.setNombre(archivo.getName());
                        guardar(aux.getPath(), aux.getTextArea().getText());
                        this.panelConPestañas.removeAll();
                        this.panelConPestañas.updateUI();
                        agregarPest();
                        JOptionPane.showMessageDialog(this, "Guardado");
                    } catch (IOException ex) {
                        System.out.println("Error en carga archivo");
                    }
                }
            } else {
                try {
                    guardar(aux.getPath(), aux.getTextArea().getText());
                    JOptionPane.showMessageDialog(this, "Guardado");
                } catch (IOException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, debes de seleccionar una pestaña editando antes en ella.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarComoActionPerformed
        // TODO add your handling code here:
        Pestaña aux = getPestaña();
        if (aux != null) {
            JFileChooser chooser = new JFileChooser();
            int opcion;
            opcion = chooser.showSaveDialog(this);

            if (opcion == JFileChooser.APPROVE_OPTION) {
                try {
                    File archivo = chooser.getSelectedFile();
                    String path = (archivo.getAbsolutePath() + extension());
                    guardar(path, aux.getTextArea().getText());
                    Pestaña clone = aux.clone();
                    clone.setPath(path);
                    clone.setNombre(archivo.getName());
                    pestañas.remove(aux);
                    pestañas.add(clone);
                    this.panelConPestañas.removeAll();
                    this.panelConPestañas.updateUI();
                    agregarPest();
                    JOptionPane.showMessageDialog(this, "Guardado");
                } catch (IOException ex) {
                    System.out.println("Error en carga archivo");
                } catch (CloneNotSupportedException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error, debes de seleccionar una pestaña editando antes en ella.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_menuGuardarComoActionPerformed

    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Gracias por utilizar esta aplicación.");
        System.exit(0);
    }//GEN-LAST:event_menuSalirActionPerformed

    private void menuTablaLALRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTablaLALRActionPerformed
        // TODO add your handling code here:
        if (actual != null) {
            try {
                generadorHTML = new ManejadorGeneradorHTML(actual.getTablaLALR().getTerminalesNoTerminales());
                generadorHTML.escribirArchivoSalida("./TablaLALR.html", generadorHTML.construirTabla(actual.getTablaLALR().getEstados()));
                abrirHTML("./TablaLALR.html");
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un lenguaje.");
   
        }
    }//GEN-LAST:event_menuTablaLALRActionPerformed

    private void menuErroresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuErroresMouseClicked
        // TODO add your handling code here:
        dialogErrores.addErrores(errores);
        dialogErrores.setVisible(true);
    }//GEN-LAST:event_menuErroresMouseClicked

    private void abrirHTML(String path){
        try {
            File archivo = new File(path);
            Desktop.getDesktop().open(archivo);
        } catch (IOException ex) {
            System.out.println("ERROR");
        }
    }
    
    private Lenguajes lA(String nombre){
        for (Lenguajes len : lenguajes) {
            if (len.getInformacionLenguaje().getNombre().equals(nombre)) {
                return len;
            }
        } return null;
    }
    
    /* Metodo para agregar con extension */
    
    private String extension(){
        Lenguajes aux = actual;
        if (aux != null) {
            if (aux.getInformacionLenguaje().getExtension() != null && !aux.getInformacionLenguaje().getExtension().isEmpty())  {
                return aux.getInformacionLenguaje().getExtension();
            }
        } return "";
    }
    
    public static void cleanErrores(){
        errores.clear();
    }
    
    /* Metodo para agregar, lenguajes al área de menú */
    
    private void agregarLenguaje(String nombreDelLenguaje){
        JMenuItem nuevoLenguaje = new JMenuItem(nombreDelLenguaje);
        nuevoLenguaje.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {//Evento del boton lenguajes
                txtLenguajeSeleccionado.setText(nuevoLenguaje.getText());
                actual = lA(nuevoLenguaje.getText());
                if (actual != null) {
                    System.out.println("Actual " + actual.getInformacionLenguaje().getExtension());
                    if (actual.getTablaLALR().isConlfictos()) {
                        JOptionPane.showMessageDialog(null, "Lo siento, la gramatica de este lenguaje posee conflictos. Por lo tanto los botones del area Ver estan desactivados.");
                        menuTablaLALR.setEnabled(false);
                        menuCompilar.setEnabled(false);
                    } else {
                        menuTablaLALR.setEnabled(true);
                        menuCompilar.setEnabled(true);
                    }
                }
               
            }
        });
        menuLenguajes.add(nuevoLenguaje);
    }
    
    private void agregarPestaña(String titulo, String path, String txt){
        JTextArea textArea = new JTextArea();
        textArea.setColumns(20);
        textArea.setRows(5);
        JScrollPane panelConScroll = new JScrollPane();
        panelConScroll.setViewportView(textArea);
        Pestaña pestaña = new Pestaña(titulo, textArea, panelConScroll, path, this);
        pestaña.getTextArea().setText(txt);
        panelConPestañas.addTab(pestaña.getNombre(), pestaña.getScrollPane());
        pestañas.add(pestaña);
    }
    
    private void removerMenus(){
        menuLenguajes.removeAll();
        lenguajes.forEach((lenguaje) -> {
            agregarLenguaje(lenguaje.getInformacionLenguaje().getNombre());
        });
    }
    
    private void guardar(String path, String textoSalida) throws IOException{
        File chooser = new File(path);
        try (FileOutputStream salida = new FileOutputStream(chooser)) {
            byte[] byteTxt = textoSalida.getBytes();
            salida.write(byteTxt);
        } catch (FileNotFoundException ex) {
            System.out.println("no existe el archivo");
        }
    }
    
    public void addLng(Lenguajes l){
        agregarLenguaje(l.getInformacionLenguaje().getNombre());
    }
    
    private Pestaña getPestaña(){
        for (Pestaña pestaña : pestañas) {
            if (pestaña.getNombre().equalsIgnoreCase(pestañaActual)) {
                return pestaña;
            }
        }
        return null;
    }
   
    public static void addError(String error){
        Frame.errores.add(error);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Darcula".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel lblColumna;
    private javax.swing.JLabel lblCursor;
    private javax.swing.JLabel lblLenguajeSeleccionado;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuBorrarLenguaje;
    private javax.swing.JMenuItem menuCargarLenguaje;
    private javax.swing.JMenuItem menuCompilar;
    private javax.swing.JMenu menuEjecutar;
    private javax.swing.JMenu menuErrores;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuGuardarComo;
    private javax.swing.JMenu menuLenguajes;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenuItem menuPila;
    private javax.swing.JMenuBar menuPrincipal;
    private javax.swing.JMenuItem menuSalir;
    private javax.swing.JMenuItem menuTablaLALR;
    private javax.swing.JMenu menuVer;
    private javax.swing.JTabbedPane panelConPestañas;
    private javax.swing.JTextField txtLenguajeSeleccionado;
    // End of variables declaration//GEN-END:variables
}
